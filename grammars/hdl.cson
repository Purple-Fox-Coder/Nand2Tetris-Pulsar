# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.hdl'
'name': 'hdl'
'fileTypes': [
  'hdl'
]
'patterns': [
  {
    'match': '\\s*//.*$'
    'name': 'comment.hdl'
  }
  {
    'begin': '/\\*'
    'end': '\\*/'
    'name': 'comment.block.hdl'
  }
  {
    'match': '(?<=(\\[))([0-9]+)(?=(\\]))'
    'name': 'constant.language.hdl'
  }
  {
    'match': '(?<=(\\[))([0-9]+\\.\\.[0-9]+)(?=(\\]))'
    'name': 'constant.language.hdl'
  }
  {
    'match': '((?<=(\\=))|(?<=(\\s)))((true)|(false))((?=(,))|(?=(\\s)))'
    'name': 'constant.language.hdl'
  }
  {
    'match': '(?<=\\s)(IN)|(OUT)|(PARTS)((?=(\\s))|(?=:))'
    'name': 'keyword.control.hdl'
  }
  {
    'match': '(?<=((.|\\s)*))\\=(?=((.|\\s)*))'
    'name': 'keyword.operator.hdl'
  }
  {
    'match': '^\\s*CHIP\\s+[a-zA-Z0-9]+'
    'name': 'storage.type.hdl'
  }
  {
    'match': '((?<=(\\(\\s*))|(?<=(,\\s*)))[a-zA-Z0-9]+((?=(\\s*\\=))|(?=(\\s*\\))))'
    'name': 'variable.string.member.hdl'
  }
  {
    'match': '[a-zA-Z0-9]+(?=(\\())'
    'name': 'function.keyword.hdl'
  }
]

folds: [
    type: ['comment', 'preproc_arg']
]

scopes:
    'comment': 'comment.block'
